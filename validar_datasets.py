#!/usr/bin/env python3
"""
Script de validaci√≥n de datasets para el curso de IA aplicada al Desarrollo Web
Verifica que todos los archivos CSV tienen la estructura adecuada para las pr√°cticas
"""

import pandas as pd
import numpy as np
from pathlib import Path
import sys

def validar_dataset(archivo, descripcion, validaciones):
    """Valida un dataset espec√≠fico"""
    print(f"\nüîç Validando {descripcion}")
    print("-" * 50)
    
    try:
        # Cargar el dataset
        df = pd.read_csv(archivo)
        print(f"‚úÖ Archivo cargado correctamente: {len(df)} filas")
        
        # Mostrar informaci√≥n b√°sica
        print(f"üìä Columnas ({len(df.columns)}): {', '.join(df.columns)}")
        print(f"üìè Dimensiones: {df.shape}")
        
        # Ejecutar validaciones espec√≠ficas
        errores = []
        for validacion in validaciones:
            try:
                resultado = validacion(df)
                if resultado is True:
                    continue
                elif resultado is False:
                    errores.append("Validaci√≥n fall√≥")
                else:
                    errores.append(resultado)
            except Exception as e:
                errores.append(f"Error en validaci√≥n: {str(e)}")
        
        if errores:
            print("‚ùå Errores encontrados:")
            for error in errores:
                print(f"   - {error}")
            return False
        else:
            print("‚úÖ Todas las validaciones pasaron correctamente")
            return True
            
    except Exception as e:
        print(f"‚ùå Error al cargar el archivo: {str(e)}")
        return False

def validar_clientes_clustering(df):
    """Validaciones espec√≠ficas para clustering de clientes"""
    # Verificar columnas requeridas
    columnas_requeridas = ['cliente_id', 'edad', 'gasto_total']
    for col in columnas_requeridas:
        if col not in df.columns:
            return f"Falta columna requerida: {col}"
    
    # Verificar tipos de datos
    if not pd.api.types.is_numeric_dtype(df['edad']):
        return "La columna 'edad' debe ser num√©rica"
    
    if not pd.api.types.is_numeric_dtype(df['gasto_total']):
        return "La columna 'gasto_total' debe ser num√©rica"
    
    # Verificar rangos razonables
    if df['edad'].min() < 18 or df['edad'].max() > 100:
        return "Edades fuera del rango esperado (18-100)"
    
    if df['gasto_total'].min() < 0:
        return "Gastos negativos encontrados"
    
    return True

def validar_precios_regresion(df):
    """Validaciones espec√≠ficas para regresi√≥n de precios"""
    # Verificar columnas requeridas
    columnas_requeridas = ['metros_cuadrados', 'habitaciones', 'precio']
    for col in columnas_requeridas:
        if col not in df.columns:
            return f"Falta columna requerida: {col}"
    
    # Verificar tipos de datos num√©ricos
    for col in ['metros_cuadrados', 'habitaciones', 'banos', 'antiguedad', 'precio']:
        if col in df.columns and not pd.api.types.is_numeric_dtype(df[col]):
            return f"La columna '{col}' debe ser num√©rica"
    
    # Verificar variables binarias
    for col in ['parking', 'ascensor', 'terraza']:
        if col in df.columns:
            valores_unicos = df[col].unique()
            if not all(v in [0, 1] for v in valores_unicos):
                return f"La columna '{col}' debe ser binaria (0/1)"
    
    # Verificar rangos razonables
    if df['metros_cuadrados'].min() < 20 or df['metros_cuadrados'].max() > 500:
        return "Metros cuadrados fuera del rango esperado (20-500)"
    
    if df['precio'].min() < 50000 or df['precio'].max() > 2000000:
        return "Precios fuera del rango esperado (50k-2M)"
    
    return True

def validar_resenas_sentimientos(df):
    """Validaciones espec√≠ficas para an√°lisis de sentimientos"""
    # Verificar columnas requeridas
    columnas_requeridas = ['texto', 'sentimiento', 'puntuacion']
    for col in columnas_requeridas:
        if col not in df.columns:
            return f"Falta columna requerida: {col}"
    
    # Verificar sentimientos v√°lidos
    sentimientos_validos = ['positivo', 'negativo', 'neutro']
    sentimientos_encontrados = df['sentimiento'].unique()
    for sent in sentimientos_encontrados:
        if sent not in sentimientos_validos:
            return f"Sentimiento inv√°lido encontrado: {sent}"
    
    # Verificar puntuaciones
    if not pd.api.types.is_numeric_dtype(df['puntuacion']):
        return "La columna 'puntuacion' debe ser num√©rica"
    
    if df['puntuacion'].min() < 1 or df['puntuacion'].max() > 5:
        return "Puntuaciones fuera del rango esperado (1-5)"
    
    # Verificar que hay texto en todas las rese√±as
    if df['texto'].isnull().any():
        return "Hay rese√±as sin texto"
    
    # Verificar longitud m√≠nima de texto
    if df['texto'].str.len().min() < 10:
        return "Algunas rese√±as son demasiado cortas"
    
    return True

def validar_ventas_siuba(df):
    """Validaciones espec√≠ficas para pr√°ctica de Siuba"""
    # Verificar columnas requeridas
    columnas_requeridas = ['cliente_id', 'fecha', 'categoria', 'cantidad', 'precio_unitario']
    for col in columnas_requeridas:
        if col not in df.columns:
            return f"Falta columna requerida: {col}"
    
    # Verificar tipos de datos
    if not pd.api.types.is_numeric_dtype(df['cantidad']):
        return "La columna 'cantidad' debe ser num√©rica"
    
    if not pd.api.types.is_numeric_dtype(df['precio_unitario']):
        return "La columna 'precio_unitario' debe ser num√©rica"
    
    # Verificar fechas
    try:
        pd.to_datetime(df['fecha'])
    except:
        return "La columna 'fecha' tiene formato inv√°lido"
    
    # Verificar valores positivos
    if df['cantidad'].min() <= 0:
        return "Las cantidades deben ser positivas"
    
    if df['precio_unitario'].min() <= 0:
        return "Los precios unitarios deben ser positivos"
    
    return True

def mostrar_estadisticas_basicas(archivo, nombre):
    """Muestra estad√≠sticas b√°sicas del dataset"""
    df = pd.read_csv(archivo)
    print(f"\nüìà Estad√≠sticas b√°sicas - {nombre}")
    print("-" * 30)
    
    # Columnas num√©ricas
    cols_numericas = df.select_dtypes(include=[np.number]).columns
    if len(cols_numericas) > 0:
        print("Variables num√©ricas:")
        for col in cols_numericas:
            print(f"  {col}: min={df[col].min():.1f}, max={df[col].max():.1f}, media={df[col].mean():.1f}")
    
    # Columnas categ√≥ricas
    cols_categoricas = df.select_dtypes(include=['object']).columns
    if len(cols_categoricas) > 0:
        print("\nVariables categ√≥ricas:")
        for col in cols_categoricas:
            valores_unicos = len(df[col].unique())
            print(f"  {col}: {valores_unicos} valores √∫nicos")

def main():
    """Funci√≥n principal de validaci√≥n"""
    print("üöÄ VALIDACI√ìN DE DATASETS PARA PR√ÅCTICAS DE IA")
    print("=" * 60)
    
    base_path = Path("materiales/datos")
    
    # Definir archivos y sus validaciones
    validaciones = [
        {
            'archivo': base_path / "clientes_tienda.csv",
            'descripcion': "Clientes (P06 - Clustering)",
            'validaciones': [validar_clientes_clustering]
        },
        {
            'archivo': base_path / "precios_vivienda.csv", 
            'descripcion': "Precios vivienda (P05 - Regresi√≥n)",
            'validaciones': [validar_precios_regresion]
        },
        {
            'archivo': base_path / "rese√±as_sentimientos.csv",
            'descripcion': "Rese√±as sentimientos (Deep Learning - NLP)",
            'validaciones': [validar_resenas_sentimientos]
        },
        {
            'archivo': base_path / "ventas_siuba.csv",
            'descripcion': "Ventas (P04b - Siuba)",
            'validaciones': [validar_ventas_siuba]
        }
    ]
    
    # Ejecutar validaciones
    resultados = []
    for validacion in validaciones:
        archivo = validacion['archivo']
        if not archivo.exists():
            print(f"\n‚ùå Archivo no encontrado: {archivo}")
            resultados.append(False)
            continue
            
        resultado = validar_dataset(
            archivo,
            validacion['descripcion'], 
            validacion['validaciones']
        )
        resultados.append(resultado)
        
        # Mostrar estad√≠sticas si la validaci√≥n pas√≥
        if resultado:
            mostrar_estadisticas_basicas(archivo, validacion['descripcion'])
    
    # Resumen final
    print("\n" + "=" * 60)
    print("üìã RESUMEN DE VALIDACI√ìN")
    print("=" * 60)
    
    exitosos = sum(resultados)
    total = len(resultados)
    
    if exitosos == total:
        print(f"üéâ ¬°√âXITO! Todos los datasets ({exitosos}/{total}) est√°n listos para las pr√°cticas")
        print("\n‚úÖ Los estudiantes pueden comenzar con:")
        print("   ‚Ä¢ P04b: An√°lisis con Siuba")
        print("   ‚Ä¢ P05: Regresi√≥n lineal con precios de vivienda")
        print("   ‚Ä¢ P06: Clustering de clientes") 
        print("   ‚Ä¢ Deep Learning: An√°lisis de sentimientos")
    else:
        print(f"‚ö†Ô∏è  {exitosos}/{total} datasets validados correctamente")
        print("‚ùå Revisa los errores anteriores antes de comenzar las pr√°cticas")
        sys.exit(1)

if __name__ == "__main__":
    main()